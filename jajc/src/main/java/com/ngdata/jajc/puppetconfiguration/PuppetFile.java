package com.ngdata.jajc.puppetconfiguration;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.google.common.base.Function;
import com.ngdata.jajc.exception.JajcException;


/*
 * Creates the content of a puppetfile that contains only ONE puppet class
 */
public class PuppetFile {
	
	/*
	 * returns a String based on an Iterable object, used to create ruby arrays in the puppet file
	 */
	public static String iterableToString(Iterable<String> list) {
		Function<String,String> tmp = new Function<String,String>() {
			@Override
			public String apply(String arg0) {
				return arg0;
			}
		};
		return iterableToString(list,tmp);
	}
	
	/*
	 * Allow users to use function-pointer-like functionality so they have control over how 
	 * to stringify the items in the iterable
	 * @param The function will be applied to every item in the list and must return the string 
	 * representation of the item
	 */
	public static <T> String iterableToString(Iterable<T> list,Function<T,String> f) {
		StringBuilder tmp = new StringBuilder();
		tmp.append("[");
		for (T s : list)
			tmp.append("\"").append(f.apply(s)).append("\" ,");
		tmp.deleteCharAt(tmp.length() - 1); //remove trailing comma
		tmp.append("]");
		return tmp.toString();
	} 

	private String modulename,classname;
	private StringBuilder sb;
	private Set<String> properties;
	
	public PuppetFile(String modulename , String classname) {
		this.modulename = modulename;
		this.classname = classname;
		properties = new HashSet<String>();
		sb = new StringBuilder();
		if (modulename == null || classname == null)
			throw new NullPointerException("Class- or modulename can not be null");
		sb.append("# This file was generated by the Java program, it contains variables used in the puppet " 
			+  modulename + " module.\n");
		sb.append("\nclass ").append(modulename).append("::").append(classname).append(" {");
		
	}
	
	/*
	 * To assign a ruby-array to a key in the hash: the values in the properties map can be the string representation of 
	 * an array of strings eg. [ "one" , "two" , "three" ] @see iterableToString(Iterable ...)
	 * @param name of the array
	 */
	public void addHash(String name,Map<String,String> properties) throws JajcException {
		checkexists(name);
		sb.append("\n$").append(name).append(" = {");

		for (String key : properties.keySet()) {
			String value = properties.get(key);
			sb.append("\n \"").append(key).append("\" => ").append(getValue(value)).append(" ,");
		}
		
		sb.deleteCharAt(sb.length() - 1); //delete trailing comma
		sb.append("\n}");
			
	}
	
	private void checkexists(String name) throws JajcException {
		if (properties.contains(name))
			throw new JajcException("Property \"" + name + "\" already exists in puppet class \"" 
					+ modulename + "::" + classname +  "\"");
		else
			properties.add(name);
	}

	/*
	 * To assign a ruby-array to a variable : value parameter can be the string representation of 
	 * an array of strings eg. [ "one" , "two" , "three" ] 
	 */
	public void addProperty(String name, String value) throws JajcException {
		checkexists(name);
		sb.append("\n$").append(name).append(" = ").append(getValue(value));
	}
	
	
	/*
	 * Don't stringify arrays, but stringify something like ${this is an example}/still/part/of/the/example but 
	 * don't stringify $zk_quorum
	 */
	private String getValue(String value) {
		if (value.indexOf('[') != -1 || (value.charAt(0) == '$' && value.charAt(1) != '{'))
			return value;
		else 
			return "\"" + value + "\"";
		
	}
	
	@Override
	public String toString() {
		return sb.toString() + "\n}\n";//close the puppet class, sb can still be used to make changes
	}
	
}
